import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;

public class RemoteListServer {
    private static RemoteListImpl remoteList;

    public static void main(String[] args) {
        try {
            System.out.println("=== INICIANDO SERVIDOR REMOTELIST ===");

            // Cria o registry RMI na porta 1099 (porta padr√£o)
            System.out.println("Criando RMI Registry...");
            LocateRegistry.createRegistry(1099);

            // Cria uma inst√¢ncia do servi√ßo
            System.out.println("Inicializando RemoteList...");
            remoteList = new RemoteListImpl();

            // Registra o servi√ßo no registry
            System.out.println("Registrando servi√ßo...");
            Naming.rebind("//localhost/RemoteList", remoteList);

            System.out.println("\n‚úÖ Servidor RemoteList iniciado com sucesso!");
            System.out.println("üìç Servidor registrado em: //localhost/RemoteList");
            System.out.println("üîí Sistema de persist√™ncia ativo");
            System.out.println("üì∏ Snapshots autom√°ticos a cada 30 segundos");
            System.out.println("üöÄ Aguardando conex√µes de clientes...");

            // Adicionar hook para shutdown gracioso
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                System.out.println("\nüõë Sinal de shutdown recebido...");
                if (remoteList != null) {
                    try {
                        remoteList.shutdown();
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                }
                System.out.println("Servidor finalizado.");
            }));

            // Manter o servidor em execu√ß√£o
            System.out.println("\nüí° Para parar o servidor, pressione Ctrl+C");
            System.out.println("=====================================\n");

            // Loop infinito para manter o servidor ativo
            Object lock = new Object();
            synchronized (lock) {
                try {
                    lock.wait();
                } catch (InterruptedException e) {
                    System.out.println("Servidor interrompido.");
                }
            }

        } catch (Exception e) {
            System.err.println("‚ùå Erro no servidor: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
