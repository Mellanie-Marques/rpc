import java.rmi.Naming;
import java.util.Arrays;
import java.util.Scanner;

public class RemoteListClient {
    private static RemoteListInterface remoteList;

    public static void main(String[] args) {
        try {
            // Conectar ao servidor
            System.out.println("Conectando ao servidor RemoteList...");
            remoteList = (RemoteListInterface) Naming.lookup("//localhost/RemoteList");
            System.out.println("‚úÖ Conectado ao servidor!\n");

            // Menu interativo
            Scanner scanner = new Scanner(System.in);
            boolean running = true;

            while (running) {
                printMenu();
                System.out.print("Escolha uma op√ß√£o: ");

                try {
                    int choice = scanner.nextInt();
                    scanner.nextLine(); // Consumir quebra de linha

                    switch (choice) {
                        case 1:
                            runBasicDemo();
                            break;
                        case 2:
                            runPersistenceTest();
                            break;
                        case 3:
                            runConcurrencyTest();
                            break;
                        case 4:
                            runInteractiveMode(scanner);
                            break;
                        case 5:
                            showCurrentState();
                            break;
                        case 0:
                            running = false;
                            break;
                        default:
                            System.out.println("‚ùå Op√ß√£o inv√°lida!");
                    }

                } catch (Exception e) {
                    System.out.println("‚ùå Erro: " + e.getMessage());
                    scanner.nextLine(); // Limpar buffer
                }

                if (running) {
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine();
                }
            }

            System.out.println("Cliente finalizado.");
            scanner.close();

        } catch (Exception e) {
            System.err.println("‚ùå Erro no cliente: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void printMenu() {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("üéõÔ∏è  MENU REMOTELIST CLIENT");
        System.out.println("=".repeat(50));
        System.out.println("1. üöÄ Demonstra√ß√£o B√°sica");
        System.out.println("2. üíæ Teste de Persist√™ncia");
        System.out.println("3. ‚ö° Teste de Concorr√™ncia");
        System.out.println("4. üéÆ Modo Interativo");
        System.out.println("5. üìä Estado Atual");
        System.out.println("0. üö™ Sair");
        System.out.println("=".repeat(50));
    }

    private static void runBasicDemo() throws Exception {
        System.out.println("\nüöÄ === DEMONSTRA√á√ÉO B√ÅSICA ===");

        // Limpar dados de teste anteriores (se existirem)
        try {
            String[] ids = remoteList.listIds();
            for (String id : ids) {
                if (id.startsWith("demo_")) {
                    while (remoteList.size(id) > 0) {
                        remoteList.remove(id);
                    }
                }
            }
        } catch (Exception e) {
            // Ignorar erros de limpeza
        }

        System.out.println("üìù Criando listas de demonstra√ß√£o...");

        // Lista de n√∫meros pares
        System.out.println("\n‚ûï Adicionando n√∫meros pares:");
        for (int i = 2; i <= 10; i += 2) {
            remoteList.append("demo_pares", i);
            System.out.printf("   Adicionado: %d\n", i);
        }

        // Lista de n√∫meros √≠mpares
        System.out.println("\n‚ûï Adicionando n√∫meros √≠mpares:");
        for (int i = 1; i <= 9; i += 2) {
            remoteList.append("demo_impares", i);
            System.out.printf("   Adicionado: %d\n", i);
        }

        // Consultas
        System.out.println("\nüîç Consultando elementos:");
        System.out.printf("demo_pares[0] = %d\n", remoteList.get("demo_pares", 0));
        System.out.printf("demo_pares[2] = %d\n", remoteList.get("demo_pares", 2));
        System.out.printf("demo_impares[1] = %d\n", remoteList.get("demo_impares", 1));

        // Tamanhos
        System.out.println("\nüìè Tamanhos das listas:");
        System.out.printf("demo_pares: %d elementos\n", remoteList.size("demo_pares"));
        System.out.printf("demo_impares: %d elementos\n", remoteList.size("demo_impares"));

        // Remo√ß√µes
        System.out.println("\n‚ûñ Removendo elementos:");
        System.out.printf("Removido de demo_pares: %d\n", remoteList.remove("demo_pares"));
        System.out.printf("Removido de demo_impares: %d\n", remoteList.remove("demo_impares"));

        System.out.println("\n‚úÖ Demonstra√ß√£o b√°sica conclu√≠da!");
    }

    private static void runPersistenceTest() throws Exception {
        System.out.println("\nüíæ === TESTE DE PERSIST√äNCIA ===");

        System.out.println("üìù Este teste verifica se os dados persistem ap√≥s reiniciar o servidor.");
        System.out.println("üí° Para testar completamente:");
        System.out.println("   1. Execute este teste");
        System.out.println("   2. Pare o servidor (Ctrl+C)");
        System.out.println("   3. Reinicie o servidor");
        System.out.println("   4. Execute este teste novamente");

        // Criar lista espec√≠fica para teste de persist√™ncia
        String testListId = "persistence_test";
        long timestamp = System.currentTimeMillis();

        System.out.println("\n‚ûï Adicionando dados de teste...");

        // Adicionar alguns valores √∫nicos baseados no timestamp
        int baseValue = (int) (timestamp % 1000);
        for (int i = 0; i < 5; i++) {
            int value = baseValue + i;
            remoteList.append(testListId, value);
            System.out.printf("   Adicionado: %d\n", value);
        }

        System.out.println("\nüìä Estado atual da lista de teste:");
        showListContents(testListId);

        System.out.println("\nüíæ Aguarde o pr√≥ximo snapshot (at√© 30 segundos)...");
        System.out.println("üîÑ Ap√≥s o snapshot, voc√™ pode reiniciar o servidor para testar a recupera√ß√£o.");

        System.out.println("\n‚úÖ Dados de persist√™ncia criados!");
    }

    private static void runConcurrencyTest() throws Exception {
        System.out.println("\n‚ö° === TESTE DE CONCORR√äNCIA ===");

        String testListId = "concurrency_test";
        int numThreads = 5;
        int operationsPerThread = 10;

        System.out.printf("üßµ Criando %d threads, cada uma fazendo %d opera√ß√µes...\n",
                numThreads, operationsPerThread);

        // Array para armazenar threads
        Thread[] threads = new Thread[numThreads];

        // Criar e iniciar threads
        for (int i = 0; i < numThreads; i++) {
            final int threadId = i;
            threads[i] = new Thread(() -> {
                try {
                    RemoteListInterface localRemoteList =
                            (RemoteListInterface) Naming.lookup("//localhost/RemoteList");

                    for (int j = 0; j < operationsPerThread; j++) {
                        int value = threadId * 100 + j;
                        localRemoteList.append(testListId, value);
                        System.out.printf("Thread %d: adicionou %d\n", threadId, value);

                        // Pequena pausa para simular opera√ß√µes reais
                        Thread.sleep(100);
                    }

                } catch (Exception e) {
                    System.err.printf("Erro na thread %d: %s\n", threadId, e.getMessage());
                }
            });

            threads[i].start();
        }

        // Aguardar todas as threads terminarem
        for (Thread thread : threads) {
            thread.join();
        }

        System.out.println("\nüìä Resultado do teste de concorr√™ncia:");
        showListContents(testListId);

        int expectedSize = numThreads * operationsPerThread;
        int actualSize = remoteList.size(testListId);

        if (actualSize == expectedSize) {
            System.out.printf("‚úÖ Sucesso! Tamanho esperado: %d, obtido: %d\n",
                    expectedSize, actualSize);
        } else {
            System.out.printf("‚ö†Ô∏è  Diverg√™ncia! Esperado: %d, obtido: %d\n",
                    expectedSize, actualSize);
        }

        System.out.println("\n‚úÖ Teste de concorr√™ncia conclu√≠do!");
    }

    private static void runInteractiveMode(Scanner scanner) throws Exception {
        System.out.println("\nüéÆ === MODO INTERATIVO ===");
        System.out.println("üí° Comandos dispon√≠veis:");
        System.out.println("   append <lista> <valor>  - Adicionar valor √† lista");
        System.out.println("   get <lista> <√≠ndice>    - Obter valor do √≠ndice");
        System.out.println("   remove <lista>          - Remover √∫ltimo elemento");
        System.out.println("   size <lista>            - Tamanho da lista");
        System.out.println("   show <lista>            - Mostrar conte√∫do da lista");
        System.out.println("   list                    - Listar todas as listas");
        System.out.println("   exit                    - Sair do modo interativo");

        boolean interactive = true;
        while (interactive) {
            System.out.print("\n> ");
            String input = scanner.nextLine().trim();

            if (input.isEmpty()) continue;

            String[] parts = input.split("\\s+");
            String command = parts[0].toLowerCase();

            try {
                switch (command) {
                    case "append":
                        if (parts.length != 3) {
                            System.out.println("‚ùå Uso: append <lista> <valor>");
                            break;
                        }
                        String listId = parts[1];
                        int value = Integer.parseInt(parts[2]);
                        remoteList.append(listId, value);
                        System.out.printf("‚úÖ Adicionado %d √† lista '%s'\n", value, listId);
                        break;

                    case "get":
                        if (parts.length != 3) {
                            System.out.println("‚ùå Uso: get <lista> <√≠ndice>");
                            break;
                        }
                        listId = parts[1];
                        int index = Integer.parseInt(parts[2]);
                        int result = remoteList.get(listId, index);
                        System.out.printf("üìã %s[%d] = %d\n", listId, index, result);
                        break;

                    case "remove":
                        if (parts.length != 2) {
                            System.out.println("‚ùå Uso: remove <lista>");
                            break;
                        }
                        listId = parts[1];
                        int removed = remoteList.remove(listId);
                        System.out.printf("üóëÔ∏è Removido %d da lista '%s'\n", removed, listId);
                        break;

                    case "size":
                        if (parts.length != 2) {
                            System.out.println("‚ùå Uso: size <lista>");
                            break;
                        }
                        listId = parts[1];
                        int size = remoteList.size(listId);
                        System.out.printf("üìè Lista '%s' tem %d elementos\n", listId, size);
                        break;

                    case "show":
                        if (parts.length != 2) {
                            System.out.println("‚ùå Uso: show <lista>");
                            break;
                        }
                        listId = parts[1];
                        showListContents(listId);
                        break;

                    case "list":
                        String[] ids = remoteList.listIds();
                        System.out.println("üìù Listas existentes: " + Arrays.toString(ids));
                        break;

                    case "exit":
                        interactive = false;
                        System.out.println("üëã Saindo do modo interativo...");
                        break;

                    default:
                        System.out.println("‚ùå Comando desconhecido: " + command);
                        break;
                }

            } catch (NumberFormatException e) {
                System.out.println("‚ùå N√∫mero inv√°lido!");
            } catch (Exception e) {
                System.out.println("‚ùå Erro: " + e.getMessage());
            }
        }
    }

    private static void showCurrentState() throws Exception {
        System.out.println("\nüìä === ESTADO ATUAL DO SERVIDOR ===");

        String[] ids = remoteList.listIds();

        if (ids.length == 0) {
            System.out.println("üîç Nenhuma lista encontrada no servidor.");
            return;
        }

        System.out.printf("üìù Total de listas: %d\n\n", ids.length);

        for (String listId : ids) {
            try {
                int size = remoteList.size(listId);
                System.out.printf("üìã Lista '%s': %d elementos\n", listId, size);

                // Mostrar alguns elementos se a lista n√£o estiver vazia
                if (size > 0) {
                    System.out.print("   Conte√∫do: [");

                    // Mostrar at√© 10 elementos
                    int maxShow = Math.min(size, 10);
                    for (int i = 0; i < maxShow; i++) {
                        if (i > 0) System.out.print(", ");
                        System.out.print(remoteList.get(listId, i));
                    }

                    if (size > 10) {
                        System.out.print(", ... (+" + (size - 10) + " elementos)");
                    }

                    System.out.println("]");
                }

            } catch (Exception e) {
                System.out.printf("   ‚ùå Erro ao acessar lista '%s': %s\n", listId, e.getMessage());
            }
        }

        System.out.println("\n‚úÖ Estado atual exibido!");
    }

    private static void showListContents(String listId) throws Exception {
        try {
            int size = remoteList.size(listId);
            System.out.printf("üìã Lista '%s' (%d elementos):\n", listId, size);

            if (size == 0) {
                System.out.println("   (vazia)");
                return;
            }

            System.out.print("   [");
            for (int i = 0; i < size; i++) {
                if (i > 0) System.out.print(", ");
                System.out.print(remoteList.get(listId, i));
            }
            System.out.println("]");

        } catch (Exception e) {
            System.out.printf("‚ùå Erro ao mostrar lista '%s': %s\n", listId, e.getMessage());
        }
}
}
